
import React, { useEffect, useState, useCallback } from 'react';
import {
  StyleSheet,
  ScrollView,
  View,
  Alert,
  Linking,
  Platform,
} from 'react-native';
import {
  Layout,
  Text,
  Card,
  Button,
  Icon,
  IconProps,
  List,
  ListItem,
  TopNavigation,
  Divider,
} from '@ui-kitten/components';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import * as Haptics from 'expo-haptics';
import authService from '../../services/authService';
import saHealthcareService, { type GeoLocation, type GPPractice, type Pharmacy } from '../../services/healthcareIntegration';
import * as Location from 'expo-location';
import i18n from '../../i18n';
import { MedGuardColors } from '../../theme/colors';
import { Spacing } from '../../theme/typography';
import { LargeAccessibleButton } from '../../components/accessibility/AccessibleComponents'

const PhoneIcon = (props: IconProps) => <Icon {...props} name='phone-outline' />;
const PersonIcon = (props: IconProps) => <Icon {...props} name='person-outline' />;
const HeartIcon = (props: IconProps) => <Icon {...props} name='heart-outline' />;
const AlertIcon = (props: IconProps) => <Icon {...props} name='alert-triangle-outline' />;
const ShareIcon = (props: IconProps) => <Icon {...props} name='share-outline' />;

interface EmergencyContact {
  id: string;
  name: string;
  phone: string;
  relationship: string;
}

interface MedicalInfo {
  bloodType: string;
  allergies: string[];
  medicalConditions: string[];
  currentMedications: string[];
  emergencyNotes: string;
}

const EmergencyScreen: React.FC = () => {
  const insets = useSafeAreaInsets();
  const [user, setUser] = useState<any>(null);
  const [geo, setGeo] = useState<GeoLocation | null>(null);
  const [nearbyPharmacies, setNearbyPharmacies] = useState<Pharmacy[]>([]);
  const [nearbyGPs, setNearbyGPs] = useState<GPPractice[]>([]);
  const [locating, setLocating] = useState(false);
  const [emergencyContacts, setEmergencyContacts] = useState<EmergencyContact[]>([
    {
      id: '1',
      name: 'Dr. Sarah Johnson',
      phone: '+27123456789',
      relationship: 'Primary Care Doctor',
    },
    {
      id: '2',
      name: 'John Smith',
      phone: '+27987654321',
      relationship: 'Spouse',
    },
  ]);
  const [medicalInfo, setMedicalInfo] = useState<MedicalInfo>({
    bloodType: 'O+',
    allergies: ['Penicillin', 'Shellfish'],
    medicalConditions: ['Hypertension', 'Diabetes Type 2'],
    currentMedications: ['Metformin 500mg', 'Lisinopril 10mg'],
    emergencyNotes: 'Diabetic - may need glucose if unconscious',
  });

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const currentUser = await authService.getCurrentUser();
      setUser(currentUser);
    } catch (error) {
      console.error('Load user error:', error);
    }
  };

  const callEmergencyServices = async () => {
    Alert.alert(
      i18n.t('emergency.call_emergency'),
      i18n.t('emergency.emergency_number'),
      [
        { text: i18n.t('common.cancel') },
        {
          text: i18n.t('emergency.call_emergency'),
          style: 'destructive',
          onPress: () => {
            Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
            Linking.openURL('tel:10177');
          },
        },
      ]
    );
  };

  const callPoisonControl = () => {
    Alert.alert(
      i18n.t('emergency.poison_control'),
      i18n.t('emergency.poison_control') + ': 0861 555 777',
      [
        { text: i18n.t('common.cancel') },
        {
          text: i18n.t('common.call'),
          onPress: () => {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
            Linking.openURL('tel:0861555777');
          },
        },
      ]
    );
  };

  const callEmergencyContact = (contact: EmergencyContact) => {
    Alert.alert(
      `${i18n.t('common.call')} ${contact.name}`,
      contact.phone,
      [
        { text: i18n.t('common.cancel') },
        {
          text: i18n.t('common.call'),
          onPress: () => {
            Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
            Linking.openURL(`tel:${contact.phone}`);
          },
        },
      ]
    );
  };

  const shareMedicalInfo = () => {
    const medicalInfoText = `
🏥 ${i18n.t('emergency.medical_id')}

👤 ${user?.firstName} ${user?.lastName}
🩸 ${i18n.t('emergency.blood_type')}: ${medicalInfo.bloodType}

🚫 ${i18n.t('emergency.allergies')}:
${medicalInfo.allergies.join(', ')}

🏥 ${i18n.t('emergency.medical_conditions')}:
${medicalInfo.medicalConditions.join(', ')}

💊 ${i18n.t('emergency.current_medications')}:
${medicalInfo.currentMedications.join(', ')}

📝 ${i18n.t('emergency.medical_notes')}:
${medicalInfo.emergencyNotes}

📱 Generated by MedGuard SA
    `.trim();

    // In a real app, you would use React Native Share
    Alert.alert(
      i18n.t('emergency.share_info'),
      i18n.t('emergency.emergency_info_shared')
    );
  };

  const locateAndSuggestCare = useCallback(async () => {
    try {
      setLocating(true);
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        return;
      }
      const position = await Location.getCurrentPositionAsync({ accuracy: Location.Accuracy.Balanced });
      const location: GeoLocation = {
        lat: position.coords.latitude,
        lng: position.coords.longitude,
      };
      setGeo(location);
      const [pharms, gps] = await Promise.all([
        saHealthcareService.findNearbyPharmacies(location),
        saHealthcareService.findNearbyGPs(location),
      ]);
      setNearbyPharmacies(pharms);
      setNearbyGPs(gps);
    } finally {
      setLocating(false);
    }
  }, []);

  const renderEmergencyContact = ({ item }: { item: EmergencyContact }) => (
    <ListItem
      title={item.name}
      description={item.relationship}
      accessoryLeft={() => (
        <Icon
          name="person"
          style={styles.contactIcon}
          fill={MedGuardColors.primary.trustBlue}
        />
      )}
      accessoryRight={() => (
        <Button
          size="small"
          status="success"
          accessoryLeft={PhoneIcon}
          onPress={() => callEmergencyContact(item)}
        >
          {i18n.t('common.call')}
        </Button>
      )}
      onPress={() => callEmergencyContact(item)}
      style={styles.contactItem}
    />
  );

  return (
    <Layout style={[styles.container, { paddingTop: insets.top }]} level="2">
      <TopNavigation
        title={i18n.t('emergency.title')}
        alignment="center"
      />

      <ScrollView style={styles.scrollView}>
        {/* Emergency Services */}
        <Card style={styles.emergencyCard} status="danger">
          <View style={styles.emergencyHeader}>
            <Icon
              name="alert-triangle"
              style={styles.emergencyIcon}
              fill={MedGuardColors.alerts.criticalRed}
            />
            <Text category="h5" style={styles.emergencyTitle}>
              {i18n.t('emergency.call_emergency')}
            </Text>
          </View>

          <View style={styles.emergencyButtons}>
            <LargeAccessibleButton onPress={callEmergencyServices} accessibilityLabel={i18n.t('emergency.emergency_number')}>
              {i18n.t('emergency.emergency_number')}
            </LargeAccessibleButton>

            <LargeAccessibleButton onPress={callPoisonControl} accessibilityLabel={i18n.t('emergency.poison_control')}>
              {i18n.t('emergency.poison_control')}
            </LargeAccessibleButton>
          </View>
        </Card>

        {/* Medical ID Card */}
        <Card style={styles.medicalIdCard}>
          <View style={styles.cardHeader}>
            <Icon
              name="heart"
              style={styles.cardIcon}
              fill={MedGuardColors.alerts.criticalRed}
            />
            <Text category="h6">{i18n.t('emergency.medical_id')}</Text>
            <Button
              size="small"
              appearance="ghost"
              accessoryLeft={ShareIcon}
              onPress={shareMedicalInfo}
            />
          </View>

          <Divider style={styles.divider} />

          {/* Personal Info */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('profile.personal_info')}:
            </Text>
            <Text category="s1">
              {user?.firstName} {user?.lastName}
            </Text>
          </View>

          {/* Blood Type */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('emergency.blood_type')}:
            </Text>
            <Text category="h6" style={styles.bloodType}>
              {medicalInfo.bloodType}
            </Text>
          </View>

          {/* Allergies */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('emergency.allergies')}:
            </Text>
            {medicalInfo.allergies.map((allergy, index) => (
              <View key={index} style={styles.allergyItem}>
                <Icon
                  name="alert-circle"
                  style={styles.allergyIcon}
                  fill={MedGuardColors.alerts.warningAmber}
                />
                <Text category="s1">{allergy}</Text>
              </View>
            ))}
          </View>

          {/* Medical Conditions */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('emergency.medical_conditions')}:
            </Text>
            {medicalInfo.medicalConditions.map((condition, index) => (
              <Text key={index} category="s1" style={styles.conditionItem}>
                • {condition}
              </Text>
            ))}
          </View>

          {/* Current Medications */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('emergency.current_medications')}:
            </Text>
            {medicalInfo.currentMedications.map((medication, index) => (
              <Text key={index} category="s1" style={styles.medicationItem}>
                • {medication}
              </Text>
            ))}
          </View>

          {/* Emergency Notes */}
          <View style={styles.infoSection}>
            <Text category="s2" style={styles.infoLabel}>
              {i18n.t('emergency.medical_notes')}:
            </Text>
            <Text category="s1" style={styles.emergencyNotes}>
              {medicalInfo.emergencyNotes}
            </Text>
          </View>
        </Card>

        {/* Care Nearby */}
        <Card style={styles.medicalIdCard}>
          <View style={styles.cardHeader}>
            <Icon name="map" style={styles.cardIcon} fill={MedGuardColors.primary.trustBlue} />
            <Text category="h6">Nearby Care</Text>
            <Button size="small" onPress={locateAndSuggestCare} disabled={locating}>
              {locating ? i18n.t('performance.refreshing') : 'Locate'}
            </Button>
          </View>
          {nearbyPharmacies.map((p, idx) => (
            <View key={`ph-${idx}`} style={styles.infoSection}>
              <Text category="s1">Pharmacy: {p.name}</Text>
              <Text appearance="hint">Hours: {p.hours}</Text>
              <LargeAccessibleButton
                onPress={() => {
                  const url = Platform.select({
                    ios: `http://maps.apple.com/?daddr=${p.location.lat},${p.location.lng}`,
                    android: `geo:${p.location.lat},${p.location.lng}?q=${encodeURIComponent(p.name)}`,
                    default: `https://www.google.com/maps/search/?api=1&query=${p.location.lat},${p.location.lng}`,
                  });
                  if (url) Linking.openURL(url);
                }}
                accessibilityLabel={`Navigate to ${p.name}`}
              >
                Navigate
              </LargeAccessibleButton>
            </View>
          ))}
          {nearbyGPs.map((g, idx) => (
            <View key={`gp-${idx}`} style={styles.infoSection}>
              <Text category="s1">GP: {g.name}</Text>
              <Text appearance="hint">Hours: {g.hours}</Text>
              {!!g.phone && (
                <LargeAccessibleButton onPress={() => Linking.openURL(`tel:${g.phone}`)} accessibilityLabel={`Call ${g.name}`}>
                  Call
                </LargeAccessibleButton>
              )}
            </View>
          ))}
        </Card>

        {/* Emergency Contacts */}
        <Card style={styles.contactsCard}>
          <View style={styles.cardHeader}>
            <Icon
              name="people"
              style={styles.cardIcon}
              fill={MedGuardColors.primary.trustBlue}
            />
            <Text category="h6">{i18n.t('emergency.emergency_contacts')}</Text>
          </View>

          <List
            data={emergencyContacts}
            renderItem={renderEmergencyContact}
            ItemSeparatorComponent={() => <Divider />}
          />
        </Card>
      </ScrollView>
    </Layout>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  scrollView: {
    flex: 1,
    paddingHorizontal: Spacing.md,
  },
  emergencyCard: {
    marginBottom: Spacing.md,
  },
  emergencyHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.md,
  },
  emergencyIcon: {
    width: 32,
    height: 32,
    marginRight: Spacing.sm,
  },
  emergencyTitle: {
    flex: 1,
    color: MedGuardColors.alerts.criticalRed,
  },
  emergencyButtons: {
    gap: Spacing.sm,
  },
  emergencyButton: {
    marginBottom: Spacing.xs,
  },
  medicalIdCard: {
    marginBottom: Spacing.md,
  },
  contactsCard: {
    marginBottom: Spacing.xl,
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: Spacing.sm,
  },
  cardIcon: {
    width: 24,
    height: 24,
    marginRight: Spacing.sm,
  },
  divider: {
    marginVertical: Spacing.sm,
  },
  infoSection: {
    marginBottom: Spacing.md,
  },
  infoLabel: {
    fontWeight: '600',
    marginBottom: Spacing.xs,
    color: MedGuardColors.primary.trustBlue,
  },
  bloodType: {
    fontSize: 24,
    fontWeight: 'bold',
    color: MedGuardColors.alerts.criticalRed,
  },
  allergyItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: Spacing.xs,
  },
  allergyIcon: {
    width: 16,
    height: 16,
    marginRight: Spacing.xs,
  },
  conditionItem: {
    marginBottom: Spacing.xs,
    paddingLeft: Spacing.sm,
  },
  medicationItem: {
    marginBottom: Spacing.xs,
    paddingLeft: Spacing.sm,
    color: MedGuardColors.primary.trustBlue,
  },
  navigateBtn: {
    marginTop: Spacing.xs,
    alignSelf: 'flex-start',
  },
  emergencyNotes: {
    backgroundColor: MedGuardColors.extended.lightGray,
    padding: Spacing.sm,
    borderRadius: 8,
    fontStyle: 'italic',
  },
  contactItem: {
    paddingVertical: Spacing.sm,
  },
  contactIcon: {
    width: 24,
    height: 24,
  },
});

export default EmergencyScreen;
